/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package mib;

import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JOptionPane;
import oru.inf.InfDB;
import oru.inf.InfException;
/**
 *
 * @author Otte
 */
public class AdminFonster extends javax.swing.JFrame {

     private InfDB idb;
     //Sträng som används för att visa vem som är inloggad.
     private String id;
    /**
     * Creates new form HuvudFonster
     */
    public AdminFonster(InfDB idb, String id) {
        initComponents();
        this.idb = idb;
        this.id = id;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblValkommenAdmin = new javax.swing.JLabel();
        btnLogOut = new javax.swing.JButton();
        btnRegistreraAlien = new javax.swing.JButton();
        btnRedigeraAlienAgent = new javax.swing.JButton();
        btnTaBortAlien = new javax.swing.JButton();
        btnTaBortUtrustning = new javax.swing.JButton();
        btnRegistreraAgent = new javax.swing.JButton();
        btnTaBortAgent = new javax.swing.JButton();
        btnBefordraAgentTillAdministrator = new javax.swing.JButton();
        btnBytOmradesChef = new javax.swing.JButton();
        btnBytKontorsChef = new javax.swing.JButton();
        txtTaBortAgent = new javax.swing.JTextField();
        txtTaBortAlien = new javax.swing.JTextField();
        txtTaBortUtrustning = new javax.swing.JTextField();
        txtBefordraAgentTillAdministrator = new javax.swing.JTextField();
        txtBytOmradesChef = new javax.swing.JTextField();
        txtBytKontorsChef = new javax.swing.JTextField();
        cbAgentInfoAttribut = new javax.swing.JComboBox<>();
        lblTaBortAgent = new javax.swing.JLabel();
        lblTaBortAlien = new javax.swing.JLabel();
        lblTaBortUtrustning = new javax.swing.JLabel();
        lblBefordraAgentTillAdministrator = new javax.swing.JLabel();
        lblBytOmradesChef = new javax.swing.JLabel();
        lblBytKontorsChef = new javax.swing.JLabel();
        btnLosenordsAndring = new javax.swing.JButton();
        txtAgentInfoID = new javax.swing.JTextField();
        lblAgentInfoID = new javax.swing.JLabel();
        lblAgentInfo = new javax.swing.JLabel();
        lblAgentInfoAttribut = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtareaAgentInfo = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblValkommenAdmin.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblValkommenAdmin.setText("Välkommen, administratör.");

        btnLogOut.setText("Logga ut");
        btnLogOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogOutActionPerformed(evt);
            }
        });

        btnRegistreraAlien.setText("Registrera ny alien");
        btnRegistreraAlien.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistreraAlienActionPerformed(evt);
            }
        });

        btnRedigeraAlienAgent.setText("Redigera enskild alien eller agent");
        btnRedigeraAlienAgent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRedigeraAlienAgentActionPerformed(evt);
            }
        });

        btnTaBortAlien.setText("Ta bort en alien");
        btnTaBortAlien.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTaBortAlienActionPerformed(evt);
            }
        });

        btnTaBortUtrustning.setText("Ta bort utrustning");
        btnTaBortUtrustning.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTaBortUtrustningActionPerformed(evt);
            }
        });

        btnRegistreraAgent.setText("Registrera ny agent");
        btnRegistreraAgent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistreraAgentActionPerformed(evt);
            }
        });

        btnTaBortAgent.setText("Ta bort en agent");
        btnTaBortAgent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTaBortAgentActionPerformed(evt);
            }
        });

        btnBefordraAgentTillAdministrator.setText("Gör till administratör");
        btnBefordraAgentTillAdministrator.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBefordraAgentTillAdministratorActionPerformed(evt);
            }
        });

        btnBytOmradesChef.setText("Byt områdeschef");
        btnBytOmradesChef.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBytOmradesChefActionPerformed(evt);
            }
        });

        btnBytKontorsChef.setText("Byta kontorschef");
        btnBytKontorsChef.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBytKontorsChefActionPerformed(evt);
            }
        });

        txtTaBortAgent.setText("13");

        txtTaBortAlien.setText("2");

        txtTaBortUtrustning.setText("39");

        txtBefordraAgentTillAdministrator.setText("4");

        txtBytOmradesChef.setText("12");

        txtBytKontorsChef.setText("3");

        cbAgentInfoAttribut.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All Information", "Namn", "Telefon", "Anstallningsdatum", "Administrator", "Epost", "Losenord", "Omrade" }));
        cbAgentInfoAttribut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbAgentInfoAttributActionPerformed(evt);
            }
        });

        lblTaBortAgent.setText("Agent att ta bort:");

        lblTaBortAlien.setText("Alien att ta bort:");

        lblTaBortUtrustning.setText("Utrustning att ta bort:");

        lblBefordraAgentTillAdministrator.setText("Agent att göra till administratör:");

        lblBytOmradesChef.setText("Agent att göra till områdeschef:");

        lblBytKontorsChef.setText("Agent att göra till kontorschef:");

        btnLosenordsAndring.setText("Ändra lösenord");
        btnLosenordsAndring.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLosenordsAndringActionPerformed(evt);
            }
        });

        txtAgentInfoID.setText("1");

        lblAgentInfoID.setText("Ange agentens id:");

        lblAgentInfo.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblAgentInfo.setText("Hitta information om en agent");

        lblAgentInfoAttribut.setText("Attribut att hitta:");

        txtareaAgentInfo.setColumns(20);
        txtareaAgentInfo.setRows(5);
        jScrollPane1.setViewportView(txtareaAgentInfo);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblTaBortAgent)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtTaBortAgent, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnTaBortAgent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblTaBortAlien)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtTaBortAlien, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnTaBortAlien, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(53, 53, 53)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblTaBortUtrustning)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtTaBortUtrustning, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnTaBortUtrustning, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 134, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblBefordraAgentTillAdministrator, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnBefordraAgentTillAdministrator, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtBefordraAgentTillAdministrator, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(4, 4, 4)
                                        .addComponent(lblBytOmradesChef)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtBytOmradesChef, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(btnBytOmradesChef, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblBytKontorsChef)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtBytKontorsChef, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                                    .addComponent(btnBytKontorsChef, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(btnLosenordsAndring, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnLogOut))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblAgentInfoID)
                                    .addComponent(lblAgentInfoAttribut))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(cbAgentInfoAttribut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtAgentInfoID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(btnRegistreraAgent)
                                                .addGap(37, 37, 37)
                                                .addComponent(btnRegistreraAlien))
                                            .addComponent(btnRedigeraAlienAgent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(14, 14, 14)))))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblAgentInfo)
                            .addComponent(lblValkommenAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(lblValkommenAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnRedigeraAlienAgent)
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btnRegistreraAlien)
                                .addComponent(btnRegistreraAgent))
                            .addGap(23, 23, 23))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtAgentInfoID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblAgentInfoID)))
                    .addComponent(lblAgentInfo))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtBytKontorsChef, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblBytKontorsChef))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnBytKontorsChef))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtBytOmradesChef, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblBytOmradesChef))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnBytOmradesChef))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblAgentInfoAttribut)
                            .addComponent(cbAgentInfoAttribut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTaBortAgent)
                    .addComponent(lblTaBortAlien)
                    .addComponent(lblTaBortUtrustning)
                    .addComponent(lblBefordraAgentTillAdministrator)
                    .addComponent(txtBefordraAgentTillAdministrator, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTaBortUtrustning, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTaBortAlien, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTaBortAgent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBefordraAgentTillAdministrator)
                    .addComponent(btnTaBortUtrustning)
                    .addComponent(btnTaBortAgent)
                    .addComponent(btnTaBortAlien))
                .addGap(116, 116, 116)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLosenordsAndring)
                    .addComponent(btnLogOut))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLogOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogOutActionPerformed
        //loggar ut och återvänder användaren till inloggningsmenyn 
        new Inloggning(idb).setVisible(true);
        dispose();
    }//GEN-LAST:event_btnLogOutActionPerformed

    private void btnBytOmradesChefActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBytOmradesChefActionPerformed
        
        if(Validering.kollaOmAgentFinns(txtBytOmradesChef)) {
            
            try {
                
                //Hämtar ID på den agent som ska befordras och kollar om den redan är områdeschef på området (eller annat område)
                String nyOmradesChefID = txtBytOmradesChef.getText();
                    String kollaChefsStatus = "SELECT agent_id FROM omradeschef WHERE agent_id = "+nyOmradesChefID;
                    String svarChefsStatus = idb.fetchSingle(kollaChefsStatus);

                    if(svarChefsStatus != null) {
                        JOptionPane.showMessageDialog(null, "Användaren är redan områdeschef för ett område.");
                    }

                    if(svarChefsStatus == null) {
                        //Om sql-frågan inte finner att agenten är en områdeschef över något område redan
                        String kollaAgentensOmrade = "SELECT Omrade FROM agent WHERE agent_id = " + nyOmradesChefID;
                        String svarAgentensOmrade = idb.fetchSingle(kollaAgentensOmrade);

                        if(svarAgentensOmrade != null) {
                            //Fail-safe för att kunna uppdatera rätt agent till rätt område. Gör rimligt antagande att en agent i denna organisation inte kan bli områdeschef i ett annat område utan att först vara därifrån.
                            String uppdateraOmradesChef = "UPDATE omradeschef SET agent_id = " + nyOmradesChefID + " WHERE omrade = " + svarAgentensOmrade;
                            idb.update(uppdateraOmradesChef);
                            JOptionPane.showMessageDialog(null, "Agenten befordrades till områdeschef");
                        }

                        else{
                            //Ifall agenten för någon anledning inte har ett tilldelat område till sig.
                            JOptionPane.showMessageDialog(null, "Gick inte att befordra agent till områdeschef, befintligt område för agent finns ej.");
                        }
                    
                } 
                
            } catch(InfException ex) {
                    JOptionPane.showMessageDialog(null, "Något gick fel");
                    System.out.println("Internt felmeddelande: " + ex.getMessage());
            }
        }
    }//GEN-LAST:event_btnBytOmradesChefActionPerformed

    private void btnTaBortUtrustningActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTaBortUtrustningActionPerformed
            //Ser till så textfältet har ett värde + att värdet är ett heltal.
        if (Validering.kollaOmUtrustningFinns(txtTaBortUtrustning)){
              try {
            // Kör en sql-fråga som kollar om ID:t man matat in matchar en utrustning i databasen.
            String utrustningAttTaBort = txtTaBortUtrustning.getText();

            boolean utrustningsBorttagning = true;

            // Sätter ihop strängar för sql-frågorna för att undvika upprepning.
            String utrustningsTypKollFrom = "SELECT utrustnings_id FROM ";
            String utrustningsTypKollWhere = " WHERE utrustnings_id=" + utrustningAttTaBort;

            // Kollar om matchande resultat finns i någon av de tre undertabellerna
            String vapenKoll = utrustningsTypKollFrom + "vapen" + utrustningsTypKollWhere;
            String teknikKoll = utrustningsTypKollFrom + "teknik" + utrustningsTypKollWhere;
            String kommunikationKoll = utrustningsTypKollFrom + "kommunikation" + utrustningsTypKollWhere;

            String vapenSvar = idb.fetchSingle(vapenKoll);
            String teknikSvar = idb.fetchSingle(teknikKoll);
            String kommunikationSvar = idb.fetchSingle(kommunikationKoll);

            // Samma fråga med olika kriterier nedan, men de tre if-satserna kollar om nåt av värdena inte var null, stämmer det 
            if (vapenSvar != null) {
                String vapenBorttagning = "DELETE FROM vapen WHERE utrustnings_id=" + utrustningAttTaBort;
                idb.delete(vapenBorttagning);
            }

            if (teknikSvar != null) {
                String teknikBorttagning = "DELETE FROM teknik WHERE utrustnings_id=" + utrustningAttTaBort;
                idb.delete(teknikBorttagning);
            }

            if (kommunikationSvar != null) {
                String kommunikationBorttagning = "DELETE FROM kommunikation WHERE utrustnings_id=" + utrustningAttTaBort;
                idb.delete(kommunikationBorttagning);
            }

            // Denna metod körs först då alla utrustningstyper som utrustningen var associerad med är borttagna.
            if (utrustningsBorttagning) {
                String utrustningBorttagning = "DELETE FROM utrustning WHERE utrustnings_id= " + utrustningAttTaBort;
                idb.delete(utrustningBorttagning);
                JOptionPane.showMessageDialog(null, "Borttagning av utrustning lyckades");
            }

        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Något gick fel");
            System.out.println("Internt felmeddelande: " + e.getMessage());
        }
    }
    }//GEN-LAST:event_btnTaBortUtrustningActionPerformed

    private void btnTaBortAlienActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTaBortAlienActionPerformed
       //Hela metoden fungerar på samma sätt som den ovan, men kommenterar för klarhetens skull.
        if (Validering.kollaOmAlienFinns(txtTaBortAlien)){
        try {
                
                //Kollar så vår alien i fråga finns i systemet.
                String alienAttTaBort = txtTaBortAlien.getText();
                
                
                    //Egentligen lite osäker på varför jag la in denna men principen är bara att inkapsla borttagningen av vår "huvudalien"
                    boolean alienRasBorttagning = true;
                        //Sätter ihop strängar för sqlfrågorna för att undvika upprepning.
                        String alienRasKollFrom = "SELECT alien_id FROM ";
                        String alienRasKollWhere = " WHERE alien_id="+alienAttTaBort;
                        
                        //Kollar om matchande resultat finns i någon av de tre undertabellerna
                        String bogloKoll = alienRasKollFrom + "boglodite" + alienRasKollWhere;
                        String squidKoll = alienRasKollFrom + "squid" + alienRasKollWhere;
                        String wormKoll = alienRasKollFrom + "squid" + alienRasKollWhere;
                        
                        String bogloSvar = idb.fetchSingle(bogloKoll);
                        String squidSvar = idb.fetchSingle(squidKoll);
                        String wormSvar = idb.fetchSingle(wormKoll);
                        
                        
                        //Samma fråga med olika kriterier nedan, men de tre if-satserna kollar om nåt av värdena inte var null, stämmer det 
                        if(bogloSvar != null) {
                            String bogloBorttagning = "DELETE FROM boglodite WHERE alien_id="+alienAttTaBort;
                            idb.delete(bogloBorttagning);
                    }
                        if(squidSvar != null) {
                            String squidBorttagning = "DELETE FROM squid WHERE alien_id=" +alienAttTaBort;
                            idb.delete(squidBorttagning);
                        }
                        
                        if(wormSvar != null) {
                            String wormBorttagning = "DELETE FROM worm WHERE alien_id="+alienAttTaBort;
                            idb.delete(wormBorttagning);
                                    }
                        
                        //När alla andra frågor / delete satser körts genom så tar den bort alien sist. Anledningen för att ta bort de andra fälten är för att de inte är självständiga entiteter.
                        if(alienRasBorttagning) {
                            String alienBorttagning = "DELETE FROM alien WHERE alien_id="+alienAttTaBort;
                            idb.delete(alienBorttagning);
                            JOptionPane.showMessageDialog(null, "Borttagning av alien lyckades"); }
                        }
            catch(InfException e) {
                            JOptionPane.showMessageDialog(null, "Något gick fel");
                            System.out.println("Internt felmeddelande: " + e.getMessage());  
            } 
        }
    }//GEN-LAST:event_btnTaBortAlienActionPerformed

    private void btnBefordraAgentTillAdministratorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBefordraAgentTillAdministratorActionPerformed
        // Standard validering för att se så fältet inte är tomt eller innehåller oväntade karaktärer
        if (Validering.kollaOmAgentFinns(txtBefordraAgentTillAdministrator)) {
            try {
                // Basic SQL fråga för att se om adminstatus är 'N' eller 'J'
                String agentID = txtBefordraAgentTillAdministrator.getText();

                String kollaEfterAdmin = "SELECT administrator FROM agent WHERE agent_id = " + agentID; 
                String isAdmin = idb.fetchSingle(kollaEfterAdmin);

                // Egentligen en "ful lösning" som kollar om agenten finns genom att se om adminstatusen inte finns.
                // Hade varit mer korrekt att kolla efter en primärnyckel som agentens ID
                // Även anledningen att köra if-satsen här istället för att kombinera den med adminStatus är för att få ett bättre felmeddelande.
                if (isAdmin != null) {
                    // Ifall valideringen kollaAdminStatus får in värdet 'N' så ska värdet vara false, så vi kollar om värdet är false
                    if (!Validering.kollaAdminStatus(isAdmin)) {
                        // Endast om värdet är false så uppdateras fältet till 'J' och meddelande bekräftar uppdateringen.
                        String uppdateraAgent = "UPDATE agent SET administrator='J' WHERE agent_id =" + agentID;
                        idb.update(uppdateraAgent);
                        JOptionPane.showMessageDialog(null, "Befordran av agent lyckades.");
                    } else {
                        // Om agenten redan är admin så får man ett felmeddelande och så körs inte uppdateringsfrågan.
                        JOptionPane.showMessageDialog(null, "Kan inte befordra agent som redan är administratör.");   
                    }
                } else {
                    // Om agentens ID inte returnerar en användare 
                    JOptionPane.showMessageDialog(null, "Agent finns inte i systemet.");
                }
            } catch (InfException ex) { 
                JOptionPane.showMessageDialog(null, "Något gick fel");
                System.out.println("Internt felmeddelande: " + ex.getMessage());  
            }
        }    
    }//GEN-LAST:event_btnBefordraAgentTillAdministratorActionPerformed

    private void btnTaBortAgentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTaBortAgentActionPerformed
        // Den sista metoden i valideringen används för att se så man inte tar bort sig själv som användare.
        if (Validering.kollaOmAgentFinns(txtTaBortAgent)) {
            if(!txtTaBortAgent.getText().equals(id)) {
            try {
                String agentAttTaBort = txtTaBortAgent.getText();
                        // Hämtar ut aliens ur databasen som har vår agent som ansvarig agent
                        String sqlAlienFraga = "SELECT alien_id FROM alien WHERE Ansvarig_Agent = " + agentAttTaBort;

                        // Lägger in varje matchande alien ur föregående fråga i en hashmap
                        ArrayList<HashMap<String, String>> agentAnsvararFor = idb.fetchRows(sqlAlienFraga);

                        for (HashMap<String, String> alien : agentAnsvararFor) {
                            // För varje alien i hashmapen, hämta värdet på deras ID
                            String alienID = alien.get("Alien_ID");

                            // Uppdatera ansvarig agent på de aliens som påverkas till att vara samma som administratören som gjorde ändringen.
                            // Anledning bakom det är att man ändå inte kan ta bort sig själv samt att administratören bör ha ansvaret att omplacera aliens.
                            String uppdateraAnsvarigAgent = "UPDATE alien SET ansvarig_agent = " + id + " WHERE alien_id = " + alienID;
                            idb.update(uppdateraAnsvarigAgent);
                        }

                        // Tar bort agenten helt o hållet baserat på dess ID genom idb delete funktionen.
                        String agentBorttagning = "DELETE FROM agent WHERE agent_id=" + agentAttTaBort;
                        idb.delete(agentBorttagning);
                        JOptionPane.showMessageDialog(null, "Borttagning av agent lyckades");
                   
                
            } catch (InfException ex) {
                JOptionPane.showMessageDialog(null, "Något gick fel");
                System.out.println("Internt felmeddelande: " + ex.getMessage());
            }
        } else {
            // Om agentens ID matchar "sessions ID:t på vår användare"
            JOptionPane.showMessageDialog(null, "Du kan inte ta bort dig själv som användare.");
        } }
    }//GEN-LAST:event_btnTaBortAgentActionPerformed

    private void btnLosenordsAndringActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLosenordsAndringActionPerformed
        new LosenordsandringAgent(idb, id).setVisible(true);
    }//GEN-LAST:event_btnLosenordsAndringActionPerformed

    private void btnRegistreraAgentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistreraAgentActionPerformed
        new RegistreraAgent(idb).setVisible(true);
    }//GEN-LAST:event_btnRegistreraAgentActionPerformed

    private void btnRegistreraAlienActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistreraAlienActionPerformed
        new RegistreraAlien(idb).setVisible(true);
    }//GEN-LAST:event_btnRegistreraAlienActionPerformed

    private void btnBytKontorsChefActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBytKontorsChefActionPerformed
      if(Validering.kollaOmAgentFinns(txtBytKontorsChef)) {
          try {
              //Kollar om agenten vi vill befordra finns i systemet
              String nyKontorsChefsID = txtBytKontorsChef.getText();
                  
                  String kollaAgentsChefStatus = "SELECT agent_id FROM kontorschef WHERE agent_id = " + nyKontorsChefsID;
                  String svarAgentsChefStatus = idb.fetchSingle(kollaAgentsChefStatus);
                  if(svarAgentsChefStatus == null) {
                  //Kollar vilket område agenten tillhör, antagandet är att de som tillhör Svealand har Örebrokontoret, de som tillhör Götaland har Göteborgskontoret och de som tillhör Norrland har Kirunakontoret
                  String kollaAgentensOmrade = "SELECT Omrade FROM agent WHERE agent_id = " + nyKontorsChefsID;
                  String svarAgentensOmrade = idb.fetchSingle(kollaAgentensOmrade);
                  
                  if(svarAgentensOmrade != null) {
                      String agentensKontor = "";
                      agentensKontor = switch (svarAgentensOmrade) {
                          case "1" -> "Örebrokontoret";
                          case "2" -> "Göteborgskontoret";
                          case "4" -> "Kirunakontoret";
                          default -> "Okänt kontor";
                      }; // Ska inte kunna användas men finns som failsafe.
                      try{
                          //Använder try då inte alla databaser har tilldelat agenter till "Göteborgskontoret" eller "Kirunakontoret" 
                      String uppdateraKontorsChef = "UPDATE kontorschef SET agent_id = " + nyKontorsChefsID + " WHERE kontorsbeteckning = '" + agentensKontor +"'";
                      idb.update(uppdateraKontorsChef);
                      JOptionPane.showMessageDialog(null, "Agenten befordrades till kontorschef.");
                      } catch(InfException ex) {
                          JOptionPane.showMessageDialog(null, "Gick inte att befordra agent till kontorschef. Kontrollera så att agenten tillhör ett kontor");
                          System.out.println("Internt felmeddelande: " + ex.getMessage());
                      }
                  }
                  else {
                      JOptionPane.showMessageDialog(null, "Agenten är inte tilldelad ett område och kan därför inte bli kontorschef.");
                  }
              }
                    else {
                        JOptionPane.showMessageDialog(null, "Agenten är redan chef för ett kontor");
                    }}    
           catch(InfException ex) {
              JOptionPane.showMessageDialog(null, "Något gick fel");
              System.out.println("Internt felmeddelande: " + ex.getMessage());
          }
      }
    }//GEN-LAST:event_btnBytKontorsChefActionPerformed

    private void cbAgentInfoAttributActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbAgentInfoAttributActionPerformed
        if (Validering.kollaOmAgentFinns(txtAgentInfoID)) {
            try {
                String valdAgentID = txtAgentInfoID.getText();
                String valdTyp = (String) cbAgentInfoAttribut.getSelectedItem();

                // Deklarerar sträng för fråga för att kunna dynamiskt ändra den vid switch case
                String sqlFraga = "";
                
                    // Om en typ har valts i comboboxen
                    if (null != valdTyp) {
                        // Vid varje valt case så bestämmer sqlfrågan vilken typ av attribut användaren söker,
                        // och hämtar då ut värdet för denna in i textfield.
                        switch (valdTyp) {
                            case "All Information":
                                sqlFraga = "SELECT * FROM agent WHERE agent_id = " + valdAgentID;
                                try {
                                    //Lagrar alla attributer i en arraylist
                                    String[] attribut = {"Namn", "Telefon", "Anstallningsdatum", "Administrator", "Epost", "Losenord", "Omrade"};
                                    String allInfo = "";
                                     //För varje attribut i arraylistan
                                    for (String attributNamn : attribut) {
                                        //Hämtar ut varje enskild attribut ur databasen för 
                                        String attributFraga = "SELECT " + attributNamn + " FROM agent WHERE agent_id = " + valdAgentID;
                                        String attributVarde = idb.fetchSingle(attributFraga);

                                        // Formatterar informationen på ett läsbart sätt i formatet följande:
                                        //Attribut: attributens värde, sedan byter den rad och gör så tills for-each loopen är klar.
                                     allInfo +=  attributNamn+": " + attributVarde + "\n";
                                    }

                                    txtareaAgentInfo.setText(allInfo);
                                } catch (InfException ex) {
                                    JOptionPane.showMessageDialog(null, "Något gick fel");
                                    System.out.println("Internt felmeddelande: " + ex.getMessage());
                                }
                                break;
                            //Alla dessa gäller om man vill hämta ut enskilda attributer istället för att söka fram all information
                            case "Namn":
                                sqlFraga = "SELECT Namn FROM agent WHERE agent_id = " + valdAgentID;
                                break;
                            case "Telefon":
                                sqlFraga = "SELECT Telefon FROM agent WHERE agent_id = " + valdAgentID;
                                break;
                            case "Anstallningsdatum":
                                sqlFraga = "SELECT Anstallningsdatum FROM agent WHERE agent_id = " + valdAgentID;
                                break;
                            case "Administrator":
                                sqlFraga = "SELECT Administrator FROM agent WHERE agent_id = " + valdAgentID;
                                break;
                            case "Epost":
                                sqlFraga = "SELECT Epost FROM agent WHERE agent_id = " + valdAgentID;
                                break;
                            case "Losenord":
                                sqlFraga = "SELECT Losenord FROM agent WHERE agent_id = " + valdAgentID;
                                break;
                            case "Omrade":
                                sqlFraga = "SELECT Omrade FROM agent WHERE agent_id = " + valdAgentID;
                                break;
                            default:
                                break;
                        }
                            if (!valdTyp.equals("All Information")) {
                                String valdAgentInfo = idb.fetchSingle(sqlFraga);
                                txtareaAgentInfo.setText(valdAgentInfo);
                            }
                    }
                
            } catch (InfException ex) {
                JOptionPane.showMessageDialog(null, "Något gick fel");
                System.out.println("Internt felmeddelande: " + ex.getMessage());
            }
        }
    }//GEN-LAST:event_cbAgentInfoAttributActionPerformed

    private void btnRedigeraAlienAgentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRedigeraAlienAgentActionPerformed
        new RedigeraAlienAgent(idb, id).setVisible(true);
        
    }//GEN-LAST:event_btnRedigeraAlienAgentActionPerformed

    /**
     * @param args the command line arguments
     */
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBefordraAgentTillAdministrator;
    private javax.swing.JButton btnBytKontorsChef;
    private javax.swing.JButton btnBytOmradesChef;
    private javax.swing.JButton btnLogOut;
    private javax.swing.JButton btnLosenordsAndring;
    private javax.swing.JButton btnRedigeraAlienAgent;
    private javax.swing.JButton btnRegistreraAgent;
    private javax.swing.JButton btnRegistreraAlien;
    private javax.swing.JButton btnTaBortAgent;
    private javax.swing.JButton btnTaBortAlien;
    private javax.swing.JButton btnTaBortUtrustning;
    private javax.swing.JComboBox<String> cbAgentInfoAttribut;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAgentInfo;
    private javax.swing.JLabel lblAgentInfoAttribut;
    private javax.swing.JLabel lblAgentInfoID;
    private javax.swing.JLabel lblBefordraAgentTillAdministrator;
    private javax.swing.JLabel lblBytKontorsChef;
    private javax.swing.JLabel lblBytOmradesChef;
    private javax.swing.JLabel lblTaBortAgent;
    private javax.swing.JLabel lblTaBortAlien;
    private javax.swing.JLabel lblTaBortUtrustning;
    private javax.swing.JLabel lblValkommenAdmin;
    private javax.swing.JTextField txtAgentInfoID;
    private javax.swing.JTextField txtBefordraAgentTillAdministrator;
    private javax.swing.JTextField txtBytKontorsChef;
    private javax.swing.JTextField txtBytOmradesChef;
    private javax.swing.JTextField txtTaBortAgent;
    private javax.swing.JTextField txtTaBortAlien;
    private javax.swing.JTextField txtTaBortUtrustning;
    private javax.swing.JTextArea txtareaAgentInfo;
    // End of variables declaration//GEN-END:variables
}
